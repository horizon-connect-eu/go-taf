// main generates cmd/plugin_loader.go.
// plugin_loader.go consists of import statements for each plugin found under plugins/
// This is necessary because we want 1) our plugins under plugins/ 2) no explicit knowledge
// which plugins exist in non-generated files in pkg/ or cmd/.
//
// Additionally, this script checks that no .go file (except cmd/plugin_loader.go
// and the ones in plugins/) imports packages in plugins/. This ensures that 2) from above holds.
package main

import (
	"bufio"
	"errors"
	"fmt"
	"go/parser"
	"go/token"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"slices"
	"strings"
	"text/template"
	"time"
)

// Read and return the module name from go.mod
func getModuleName() string {
	f, err := os.Open(filepath.FromSlash("../go.mod"))
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		line := scanner.Text()
		if modname, ok := strings.CutPrefix(line, "module "); ok {
			return modname
		}
	}

	if err = scanner.Err(); err != nil {
		log.Fatal(err)
	}
	log.Fatal("module name not found in go.mod")
	return ""
}

func checkFile(path string) error {
	fset := token.NewFileSet()
	fcontents, err := os.ReadFile(path)
	if err != nil {
		log.Fatal(err)
	}
	f, err := parser.ParseFile(fset, path, fcontents, parser.ImportsOnly)
	if err != nil {
		log.Fatal(err)
	}
	for _, impt := range f.Imports {
		//fmt.Printf("%s %s\n", path, impt.Path.Value)
		if strings.Contains(impt.Path.Value, "plugins") {
			return fmt.Errorf("%s: you cannot import from plugins/", path)
		}
	}
	return nil
}

func checkForPluginImportStatements() error {
	fileSystem := os.DirFS("..")
	errorList := []string{}
	fs.WalkDir(fileSystem, filepath.FromSlash("."), func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			log.Fatal(err)
		}
		// Skip the plugin/ directory
		if strings.HasPrefix(path, "plugins") {
			return fs.SkipDir
		}
		// Skip cmd/plugin_loader.go
		if strings.HasSuffix(path, "plugin_loader.go") {
			return nil
		}
		if !d.IsDir() && strings.HasSuffix(path, ".go") {
			err = checkFile(filepath.FromSlash("../" + path))
			if err != nil {
				errorList = append(errorList, err.Error())
			}
		}

		return nil
	})
	if len(errorList) != 0 {
		return errors.New(strings.Join(errorList, "\n"))
	}
	return nil
}

func main() {

	err := checkForPluginImportStatements()
	if err != nil {
		log.Fatal(err)
	}

	pluginList := []string{}
	fileSystem := os.DirFS("..")
	BaseURL := getModuleName()

	// get a  listing of all go files in the plugins directory and store the paths to the directories (=packages)
	// they are in.
	err = fs.WalkDir(fileSystem, filepath.FromSlash("plugins"), func(path string, d fs.DirEntry, err error) error {
		if strings.HasSuffix(path, ".go") && !strings.HasSuffix(path, "plugins.go") {
			packageName := "/" + filepath.Dir(path)
			packageName = strings.ReplaceAll(packageName, "\\", "/")
			pluginList = append(pluginList, packageName)
		}
		return nil
	})
	if err != nil {
		log.Fatal(err)
	}

	// Sort the list of packages and remove duplicates
	slices.Sort(pluginList)
	pluginList = slices.Compact(pluginList)

	log.Printf("discovered the following plugins: %+v\n", pluginList)

	pluginImportList := []string{}
	for _, plugin := range pluginList {
		importStr := fmt.Sprintf("import _ \"%s%s\"", BaseURL, plugin)
		pluginImportList = append(pluginImportList, importStr)
	}

	f, err := os.Create("plugin_loader.go")
	if err != nil {
		log.Fatalln(err)
	}
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		Imports   []string
	}{
		Timestamp: time.Now(),
		Imports:   pluginImportList,
	})

}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated automatically at
// {{ .Timestamp }}
package main

{{- range .Imports }}
{{ printf . }}
{{- end }}
`))
