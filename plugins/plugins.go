// main generates cmd/plugin_loader.go.
// plugin_loader.go consists of import statements for each plugin found under plugins/
// This is necessary because we want 1) out plugins under plugins/ 2) no explicit knowledge
// which plugins exist in non-generated files in pkg/ or cmd/.
// Suspected bugs: if a plugin folder contains more than 1 .go file, we could run into problems.
// Fix: remove duplicates in pluginImportList.
package main

import (
	"fmt"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	"time"
)

const BaseURL = "gitlab-vs.informatik.uni-ulm.de/connect/taf-scalability-test"

func main() {
	pluginList := []string{}

	err := filepath.WalkDir("../plugins", func(path string, d fs.DirEntry, err error) error {
		if strings.HasSuffix(path, ".go") && !strings.HasSuffix(path, "plugins.go") {
			pluginList = append(pluginList, filepath.Dir(path[2:]))
		}
		return nil
	})
	if err != nil {
		log.Fatal(err)
	}

	log.Println(pluginList)

	pluginImportList := []string{}
	for _, plugin := range pluginList {
		importStr := fmt.Sprintf("import _ \"%s%s\"", BaseURL, plugin)
		pluginImportList = append(pluginImportList, importStr)
	}

	f, err := os.Create("plugin_loader.go")
	if err != nil {
		log.Fatalln(err)
	}
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		Imports   []string
	}{
		Timestamp: time.Now(),
		Imports:   pluginImportList,
	})

}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated automatically at
// {{ .Timestamp }}
package main

{{- range .Imports }}
{{ printf . }}
{{- end }}
`))
